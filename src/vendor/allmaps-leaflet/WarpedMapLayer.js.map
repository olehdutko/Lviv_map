{"version":3,"file":"WarpedMapLayer.js","sources":["../src/WarpedMapLayer.ts"],"sourcesContent":["import { Layer, DomUtil, setOptions } from 'leaflet'\n\nimport { WebGL2Renderer, WebGL2WarpedMap } from '@allmaps/render/webgl2'\nimport {\n  WarpedMapList,\n  Viewport,\n  WarpedMapEvent,\n  WarpedMapEventType,\n  WarpedMapLayerOptions\n} from '@allmaps/render'\nimport {\n  rectangleToSize,\n  sizesToScale,\n  hexToFractionalRgb,\n  isValidHttpUrl\n} from '@allmaps/stdlib'\n\nimport type { Map, ZoomAnimEvent } from 'leaflet'\nimport type { Point, Rectangle, ImageInformations } from '@allmaps/types'\nimport type { TransformationType, DistortionMeasure } from '@allmaps/transform'\n\nexport type LeafletWarpedMapLayerOptions = WarpedMapLayerOptions & {\n  opacity: number\n  interactive: boolean\n  className: string\n  pane: string\n  zIndex?: number\n  imageInformations?: ImageInformations\n}\n\nconst NO_RENDERER_ERROR_MESSAGE =\n  'Renderer not defined. Add the layer to a map before calling this function.'\n\nconst NO_CANVAS_ERROR_MESSAGE =\n  'Canvas not defined. Add the layer to a map before calling this function.'\n\nconst DEFAULT_PANE = 'tilePane'\nconst DEFAULT_OPACITY = 1\n\nfunction assertRenderer(\n  renderer?: WebGL2Renderer\n): asserts renderer is WebGL2Renderer {\n  if (!renderer) {\n    throw new Error(NO_RENDERER_ERROR_MESSAGE)\n  }\n}\n\nfunction assertCanvas(\n  canvas?: HTMLCanvasElement\n): asserts canvas is HTMLCanvasElement {\n  if (!canvas) {\n    throw new Error(NO_CANVAS_ERROR_MESSAGE)\n  }\n}\n\n/**\n * WarpedMapLayer class.\n *\n * Renders georeferenced maps of a Georeference Annotation on a Leaflet map.\n * WarpedMapLayer extends Leaflet's [L.Layer](https://leafletjs.com/reference.html#layer).\n */\nexport class WarpedMapLayer extends Layer {\n  container: HTMLDivElement | undefined\n\n  canvas: HTMLCanvasElement | undefined\n  gl: WebGL2RenderingContext | null | undefined\n\n  renderer: WebGL2Renderer | undefined\n\n  _annotationOrAnnotationUrl: (unknown | string) | undefined\n\n  resizeObserver: ResizeObserver | undefined\n\n  options: Partial<LeafletWarpedMapLayerOptions> = {\n    opacity: DEFAULT_OPACITY,\n    interactive: false,\n    className: '',\n    pane: DEFAULT_PANE,\n    zIndex: 1\n  }\n\n  /**\n   * Creates a WarpedMapLayer\n   * @param annotationOrAnnotationUrl - Georeference Annotation or URL of a Georeference Annotation\n   * @param options - Options for the layer\n   */\n  constructor(\n    annotationOrAnnotationUrl: unknown,\n    options?: Partial<LeafletWarpedMapLayerOptions>\n  ) {\n    super()\n    this.initialize(annotationOrAnnotationUrl, options)\n  }\n\n  initialize(\n    annotationOrAnnotationUrl: unknown,\n    options?: Partial<LeafletWarpedMapLayerOptions>\n  ) {\n    this._annotationOrAnnotationUrl = annotationOrAnnotationUrl\n    setOptions(this, options)\n\n    this._initGl()\n  }\n\n  /**\n   * Contains all code code that creates DOM elements for the layer and adds them to map panes where they belong.\n   */\n  onAdd(map: Map) {\n    if (!this._map || !this.container) {\n      return this\n    }\n\n    const paneName = this.getPaneName()\n    const pane = this._map.getPane(paneName)\n    pane?.appendChild(this.container)\n\n    map.on('zoomend viewreset move', this._update, this)\n    map.on('zoomanim', this._animateZoom, this)\n    map.on('unload', this._unload, this)\n\n    // Note: Leaflet has a resize map state change event which we could also use, but wortking with a resizeObserver is better when dealing with device pixel ratios\n    // map.on('resize', this._resized, this)\n    this.resizeObserver = new ResizeObserver(this._resized.bind(this))\n    this.resizeObserver.observe(this._map.getContainer(), {\n      box: 'content-box'\n    })\n\n    if (this._annotationOrAnnotationUrl) {\n      if (\n        typeof this._annotationOrAnnotationUrl === 'string' &&\n        isValidHttpUrl(this._annotationOrAnnotationUrl)\n      ) {\n        this.addGeoreferenceAnnotationByUrl(\n          this._annotationOrAnnotationUrl\n        ).then(() => this._update())\n      } else {\n        this.addGeoreferenceAnnotation(this._annotationOrAnnotationUrl).then(\n          () => this._update()\n        )\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Contains all cleanup code that removes the layer's elements from the DOM.\n   */\n  onRemove(map: Map) {\n    if (this.container) {\n      this.container.remove()\n    }\n\n    map.off('zoomend viewreset move', this._update, this)\n    map.off('zoomanim', this._animateZoom, this)\n\n    return this\n  }\n\n  /**\n   * Adds a [Georeference Annotation](https://iiif.io/api/extension/georef/).\n   * @param annotation - Georeference Annotation\n   * @returns - the map IDs of the maps that were added, or an error per map\n   */\n  async addGeoreferenceAnnotation(\n    annotation: unknown\n  ): Promise<(string | Error)[]> {\n    assertRenderer(this.renderer)\n\n    const results =\n      await this.renderer.warpedMapList.addGeoreferenceAnnotation(annotation)\n    this._update()\n\n    return results\n  }\n\n  /**\n   * Removes a [Georeference Annotation](https://iiif.io/api/extension/georef/).\n   * @param annotation - Georeference Annotation\n   * @returns - the map IDs of the maps that were removed, or an error per map\n   */\n  async removeGeoreferenceAnnotation(\n    annotation: unknown\n  ): Promise<(string | Error)[]> {\n    assertRenderer(this.renderer)\n\n    const results =\n      await this.renderer.warpedMapList.removeGeoreferenceAnnotation(annotation)\n    this._update()\n\n    return results\n  }\n\n  /**\n   * Adds a [Georeference Annotation](https://iiif.io/api/extension/georef/) by URL.\n   * @param annotationUrl - Georeference Annotation\n   * @returns The map IDs of the maps that were added, or an error per map\n   */\n  async addGeoreferenceAnnotationByUrl(\n    annotationUrl: string\n  ): Promise<(string | Error)[]> {\n    const annotation = await fetch(annotationUrl).then((response) =>\n      response.json()\n    )\n\n    return this.addGeoreferenceAnnotation(annotation)\n  }\n\n  /**\n   * Removes a [Georeference Annotation](https://iiif.io/api/extension/georef/) by URL.\n   * @param annotationUrl - Georeference Annotation\n   * @returns The map IDs of the maps that were removed, or an error per map\n   */\n  async removeGeoreferenceAnnotationByUrl(\n    annotationUrl: string\n  ): Promise<(string | Error)[]> {\n    const annotation = await fetch(annotationUrl).then((response) =>\n      response.json()\n    )\n    const results = this.removeGeoreferenceAnnotation(annotation)\n\n    return results\n  }\n\n  /**\n   * Adds a Georeferenced map.\n   * @param georeferencedMap - Georeferenced map\n   * @returns The map ID of the map that was added, or an error\n   */\n  async addGeoreferencedMap(\n    georeferencedMap: unknown\n  ): Promise<string | Error> {\n    assertRenderer(this.renderer)\n\n    const result =\n      this.renderer.warpedMapList.addGeoreferencedMap(georeferencedMap)\n    this._update()\n\n    return result\n  }\n\n  /**\n   * Removes a Georeferenced map.\n   * @param georeferencedMap - Georeferenced map\n   * @returns The map ID of the map that was removed, or an error\n   */\n  async removeGeoreferencedMap(\n    georeferencedMap: unknown\n  ): Promise<string | Error> {\n    assertRenderer(this.renderer)\n\n    const result =\n      this.renderer.warpedMapList.removeGeoreferencedMap(georeferencedMap)\n    this._update()\n\n    return result\n  }\n\n  /**\n   * Gets the HTML container element of the layer\n   * @returns HTML Div Element\n   */\n  getContainer(): HTMLDivElement | undefined {\n    return this.container\n  }\n\n  /**\n   * Gets the HTML canvas element of the layer\n   * @returns HTML Canvas Element\n   */\n  getCanvas(): HTMLCanvasElement | undefined {\n    return this.canvas\n  }\n\n  /**\n   * Returns the WarpedMapList object that contains a list of the warped maps of all loaded maps\n   */\n  getWarpedMapList(): WarpedMapList<WebGL2WarpedMap> {\n    assertRenderer(this.renderer)\n\n    return this.renderer.warpedMapList\n  }\n\n  /**\n   * Returns a single map's warped map\n   * @param mapId - ID of the map\n   * @returns the warped map\n   */\n  getWarpedMap(mapId: string): WebGL2WarpedMap | undefined {\n    assertRenderer(this.renderer)\n\n    return this.renderer.warpedMapList.getWarpedMap(mapId)\n  }\n\n  /**\n   * Make a single map visible\n   * @param mapId - ID of the map\n   */\n  showMap(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.showMaps([mapId])\n    this._update()\n  }\n\n  /**\n   * Make multiple maps visible\n   * @param mapIds - IDs of the maps\n   */\n  showMaps(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.showMaps(mapIds)\n    this._update()\n  }\n\n  /**\n   * Make a single map invisible\n   * @param mapId - ID of the map\n   */\n  hideMap(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.hideMaps([mapId])\n\n    this._update()\n  }\n\n  /**\n   * Make multiple maps invisible\n   * @param mapIds - IDs of the maps\n   */\n  hideMaps(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.hideMaps(mapIds)\n    this._update()\n  }\n\n  /**\n   * Returns the visibility of a single map\n   * @returns - whether the map is visible\n   */\n  isMapVisible(mapId: string): boolean | undefined {\n    assertRenderer(this.renderer)\n\n    const warpedMap = this.renderer.warpedMapList.getWarpedMap(mapId)\n    return warpedMap?.visible\n  }\n\n  /**\n   * Sets the resource mask of a single map\n   * @param mapId - ID of the map\n   * @param resourceMask - new resource mask\n   */\n  setMapResourceMask(mapId: string, resourceMask: Point[]) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.setMapResourceMask(resourceMask, mapId)\n    this._update()\n  }\n\n  /**\n   * Sets the transformation type of multiple maps\n   * @param mapIds - IDs of the maps\n   * @param transformation - new transformation type\n   */\n  setMapsTransformationType(\n    mapIds: Iterable<string>,\n    transformation: TransformationType\n  ) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.setMapsTransformationType(transformation, {\n      mapIds\n    })\n    this._update()\n  }\n\n  /**\n   * Sets the distortion measure of multiple maps\n   * @param mapIds - IDs of the maps\n   * @param distortionMeasure - new transformation type\n   */\n  setMapsDistortionMeasure(\n    mapIds: Iterable<string>,\n    distortionMeasure?: DistortionMeasure\n  ) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.setMapsDistortionMeasure(distortionMeasure, {\n      mapIds\n    })\n    this._update()\n  }\n\n  /**\n   * Returns the bounds of all visible maps (inside or outside of the Viewport), in latitude/longitude coordinates.\n   * @returns - L.LatLngBounds in array form of all visible maps\n   */\n  getBounds(): number[][] | undefined {\n    assertRenderer(this.renderer)\n\n    const bbox = this.renderer.warpedMapList.getMapsBbox({\n      projection: { definition: 'EPSG:4326' }\n    })\n    if (bbox) {\n      return [\n        [bbox[1], bbox[0]],\n        [bbox[3], bbox[2]]\n      ]\n    }\n  }\n\n  /**\n   * Bring maps to front\n   * @param mapIds - IDs of the maps\n   */\n  bringMapsToFront(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.bringMapsToFront(mapIds)\n    this._update()\n  }\n\n  /**\n   * Send maps to back\n   * @param mapIds - IDs of the maps\n   */\n  sendMapsToBack(mapIds: string[]) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.sendMapsToBack(mapIds)\n    this._update()\n  }\n\n  /**\n   * Bring maps forward\n   * @param mapIds - IDs of the maps\n   */\n  bringMapsForward(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.bringMapsForward(mapIds)\n    this._update()\n  }\n\n  /**\n   * Send maps backward\n   * @param mapIds - IDs of the maps\n   */\n  sendMapsBackward(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.sendMapsBackward(mapIds)\n    this._update()\n  }\n\n  /**\n   * Brings the layer in front of other overlays (in the same map pane).\n   */\n  bringToFront() {\n    if (this._map && this.container) {\n      DomUtil.toFront(this.container)\n    }\n    return this\n  }\n\n  /**\n   * Brings the layer to the back of other overlays (in the same map pane).\n   */\n  bringToBack() {\n    if (this._map && this.container) {\n      DomUtil.toBack(this.container)\n    }\n    return this\n  }\n\n  /**\n   * Returns the z-index of a single map\n   * @param mapId - ID of the map\n   * @returns - z-index of the map\n   */\n  getMapZIndex(mapId: string): number | undefined {\n    assertRenderer(this.renderer)\n\n    return this.renderer.warpedMapList.getMapZIndex(mapId)\n  }\n\n  /**\n   * Gets the z-index of the layer.\n   */\n  getZIndex() {\n    return this.options.zIndex\n  }\n\n  /**\n   * Changes the z-index of the layer.\n   * @param value - z-index\n   */\n  setZIndex(value: number) {\n    this.options.zIndex = value\n    this._updateZIndex()\n    return this\n  }\n\n  /**\n   * Sets the object that caches image information\n   *\n   * @param imageInformations - Object that caches image information\n   */\n  setImageInformations(imageInformations: ImageInformations) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.setImageInformations(imageInformations)\n  }\n\n  /**\n   * Gets the pane name the layer is attached to. Defaults to 'tilePane'\n   * @returns Pane name\n   */\n  getPaneName(): string {\n    // this._map.getPane(this.options.pane) ? this.options.pane : DEFAULT_PANE\n    return this.options.pane || DEFAULT_PANE\n  }\n\n  /**\n   * Gets the opacity of the layer\n   * @returns Layer opacity\n   */\n  getOpacity(): number {\n    return this.options.opacity || DEFAULT_OPACITY\n  }\n\n  /**\n   * Sets the opacity of the layer\n   * @param opacity - Layer opacity\n   */\n  setOpacity(opacity: number) {\n    this.options.opacity = opacity\n    this._update()\n    return this\n  }\n\n  /**\n   * Resets the opacity of the layer to fully opaque\n   */\n  resetOpacity() {\n    this.options.opacity = 1\n    this._update()\n    return this\n  }\n\n  /**\n   * Sets the options\n   *\n   * @param options - Options\n   */\n  setOptions(options?: Partial<LeafletWarpedMapLayerOptions>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.setOptions(options)\n  }\n\n  /**\n   * Gets the opacity of a single map\n   * @param mapId - ID of the map\n   * @returns opacity of the map\n   */\n  getMapOpacity(mapId: string): number | undefined {\n    assertRenderer(this.renderer)\n\n    return this.renderer.getMapOpacity(mapId)\n  }\n\n  /**\n   * Sets the opacity of a single map\n   * @param mapId - ID of the map\n   * @param opacity - opacity between 0 and 1, where 0 is fully transparent and 1 is fully opaque\n   */\n  setMapOpacity(mapId: string, opacity: number) {\n    assertRenderer(this.renderer)\n\n    this.renderer.setMapOpacity(mapId, opacity)\n    this._update()\n    return this\n  }\n\n  /**\n   * Resets the opacity of a single map to 1\n   * @param mapId - ID of the map\n   */\n  resetMapOpacity(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetMapOpacity(mapId)\n    this._update()\n    return this\n  }\n\n  /**\n   * Sets the saturation of a single map\n   * @param saturation - saturation between 0 and 1, where 0 is grayscale and 1 are the original colors\n   */\n  setSaturation(saturation: number) {\n    assertRenderer(this.renderer)\n\n    this.renderer.setSaturation(saturation)\n    this._update()\n    return this\n  }\n\n  /**\n   * Resets the saturation of a single map to the original colors\n   */\n  resetSaturation() {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetSaturation()\n    this._update()\n    return this\n  }\n\n  /**\n   * Sets the saturation of a single map\n   * @param mapId - ID of the map\n   * @param saturation - saturation between 0 and 1, where 0 is grayscale and 1 are the original colors\n   */\n  setMapSaturation(mapId: string, saturation: number) {\n    assertRenderer(this.renderer)\n\n    this.renderer.setMapSaturation(mapId, saturation)\n    this._update()\n    return this\n  }\n\n  /**\n   * Resets the saturation of a single map to the original colors\n   * @param mapId - ID of the map\n   */\n  resetMapSaturation(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetMapSaturation(mapId)\n    this._update()\n    return this\n  }\n\n  /**\n   * Removes a color from all maps\n   * @param options - remove color options\n   * @param options.hexColor - hex color to remove\n   * @param options.threshold - threshold between 0 and 1\n   * @param options.hardness - hardness between 0 and 1\n   */\n  setRemoveColor(\n    options: Partial<{ hexColor: string; threshold: number; hardness: number }>\n  ) {\n    assertRenderer(this.renderer)\n\n    const color = options.hexColor\n      ? hexToFractionalRgb(options.hexColor)\n      : undefined\n\n    this.renderer.setRemoveColorOptions({\n      color,\n      threshold: options.threshold,\n      hardness: options.hardness\n    })\n    this._update()\n    return this\n  }\n\n  /**\n   * Resets the color removal for all maps\n   */\n  resetRemoveColor() {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetRemoveColorOptions()\n    this._update()\n    return this\n  }\n\n  /**\n   * Removes a color from a single map\n   * @param mapId - ID of the map\n   * @param options - remove color options\n   * @param options.hexColor - hex color to remove\n   * @param options.threshold - threshold between 0 and 1\n   * @param options.hardness - hardness between 0 and 1\n   */\n  setMapRemoveColor(\n    mapId: string,\n    options: Partial<{ hexColor: string; threshold: number; hardness: number }>\n  ) {\n    assertRenderer(this.renderer)\n\n    const color = options.hexColor\n      ? hexToFractionalRgb(options.hexColor)\n      : undefined\n\n    this.renderer.setMapRemoveColorOptions(mapId, {\n      color,\n      threshold: options.threshold,\n      hardness: options.hardness\n    })\n    this._update()\n    return this\n  }\n\n  /**\n   * Resets the color removal for a single map\n   * @param mapId - ID of the map\n   */\n  resetMapRemoveColor(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetMapRemoveColorOptions(mapId)\n    return this\n  }\n\n  /**\n   * Sets the colorization for all maps\n   * @param hexColor - desired hex color\n   */\n  setColorize(hexColor: string) {\n    assertRenderer(this.renderer)\n\n    const color = hexToFractionalRgb(hexColor)\n    if (color) {\n      this.renderer.setColorizeOptions({ color })\n      this._update()\n    }\n    return this\n  }\n\n  /**\n   * Resets the colorization for all maps\n   */\n  resetColorize() {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetColorizeOptions()\n    this._update()\n\n    return this\n  }\n\n  /**\n   * Sets the colorization for a single map\n   * @param mapId - ID of the map\n   * @param hexColor - desired hex color\n   */\n  setMapColorize(mapId: string, hexColor: string) {\n    assertRenderer(this.renderer)\n\n    const color = hexToFractionalRgb(hexColor)\n    if (color) {\n      this.renderer.setMapColorizeOptions(mapId, { color })\n      this._update()\n    }\n    return this\n  }\n\n  /**\n   * Resets the colorization of a single map\n   * @param mapId - ID of the map\n   */\n  resetMapColorize(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetMapColorizeOptions(mapId)\n    this._update()\n    return this\n  }\n\n  /**\n   * Removes all warped maps from the layer\n   */\n  clear() {\n    assertRenderer(this.renderer)\n\n    this.renderer.clear()\n    this._update()\n    return this\n  }\n\n  _initGl() {\n    this.container = DomUtil.create('div')\n\n    this.container.classList.add('leaflet-layer')\n    this.container.classList.add('allmaps-warped-map-layer')\n    if (this.options.zIndex) {\n      this._updateZIndex()\n    }\n\n    this.canvas = DomUtil.create('canvas', undefined, this.container)\n\n    this.canvas.classList.add('leaflet-zoom-animated') // Treat canvas element like L.ImageOverlay\n    this.canvas.classList.add('leaflet-image-layer') // Treat canvas element like L.ImageOverlay\n    if (this.options.interactive) {\n      this.canvas.classList.add('leaflet-interactive')\n    }\n    if (this.options.className) {\n      this.canvas.classList.add(this.options.className)\n    }\n\n    this.gl = this.canvas.getContext('webgl2', {\n      premultipliedAlpha: true\n    })\n\n    if (!this.gl) {\n      throw new Error('WebGL 2 not available')\n    }\n\n    this.renderer = new WebGL2Renderer(this.gl)\n\n    this._addEventListeners()\n  }\n\n  _resized(entries: ResizeObserverEntry[]) {\n    if (!this.canvas) {\n      return\n    }\n\n    // From https://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n    // TODO: read + understand https://web.dev/device-pixel-content-box/\n    for (const entry of entries) {\n      const width = entry.contentRect.width\n      const height = entry.contentRect.height\n      const dpr = window.devicePixelRatio\n\n      // if (entry.devicePixelContentBoxSize) {\n      //   // NOTE: Only this path gives the correct answer\n      //   // The other paths are imperfect fallbacks\n      //   // for browsers that don't provide anyway to do this\n      //   width = entry.devicePixelContentBoxSize[0].inlineSize\n      //   height = entry.devicePixelContentBoxSize[0].blockSize\n      //   dpr = 1 // it's already in width and height\n      // } else if (entry.contentBoxSize) {\n      //   if (entry.contentBoxSize[0]) {\n      //     width = entry.contentBoxSize[0].inlineSize\n      //     height = entry.contentBoxSize[0].blockSize\n      //   }\n      // }\n\n      const displayWidth = Math.round(width * dpr)\n      const displayHeight = Math.round(height * dpr)\n\n      this.canvas.width = displayWidth\n      this.canvas.height = displayHeight\n\n      this.canvas.style.width = width + 'px'\n      this.canvas.style.height = height + 'px'\n    }\n    this._update()\n  }\n\n  // Note: borrowed from L.ImageOverlay\n  // https://github.com/Leaflet/Leaflet/blob/3b62c7ec96242ee4040cf438a8101a48f8da316d/src/layer/ImageOverlay.js#L225\n  _animateZoom(e: ZoomAnimEvent) {\n    if (!this.canvas) {\n      return\n    }\n\n    const scale = this._map.getZoomScale(e.zoom)\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    const offset = this._map._latLngBoundsToNewLayerBounds(\n      this._map.getBounds(),\n      e.zoom,\n      e.center\n    ).min\n\n    DomUtil.setTransform(this.canvas, offset, scale)\n  }\n\n  _updateZIndex() {\n    if (this.container && this.options.zIndex !== undefined) {\n      this.container.style.zIndex = String(this.options.zIndex)\n    }\n  }\n\n  _update() {\n    if (\n      !this._map ||\n      !this.renderer ||\n      !this.canvas ||\n      !this._map.options.crs\n    ) {\n      return\n    }\n\n    const topLeft = this._map.containerPointToLayerPoint([0, 0])\n    DomUtil.setPosition(this.canvas, topLeft)\n\n    // Get and Set opacity from Leaflet\n    this.renderer.setOpacity(this.getOpacity())\n\n    // Prepare Viewport input\n    const viewportSizeAsPoint = this._map.getSize()\n    const viewportSize = [viewportSizeAsPoint.x, viewportSizeAsPoint.y] as [\n      number,\n      number\n    ]\n\n    const geoCenterAsPoint = this._map.getCenter()\n    const projectedGeoCenterAsPoint =\n      this._map.options.crs.project(geoCenterAsPoint)\n    const projectedGeoCenter = [\n      projectedGeoCenterAsPoint.x,\n      projectedGeoCenterAsPoint.y\n    ] as [number, number]\n\n    const geoBboxAsLatLngBounds = this._map.getBounds()\n    const projectedNorthEastAsPoint = this._map.options.crs.project(\n      geoBboxAsLatLngBounds.getNorthEast()\n    )\n    const projectedNorthWestAsPoint = this._map.options.crs.project(\n      geoBboxAsLatLngBounds.getNorthWest()\n    )\n    const projectedSouthWestAsPoint = this._map.options.crs.project(\n      geoBboxAsLatLngBounds.getSouthWest()\n    )\n    const projectedSouthEastAsPoint = this._map.options.crs.project(\n      geoBboxAsLatLngBounds.getSouthEast()\n    )\n    const projectedGeoRectangle = [\n      [projectedNorthEastAsPoint.x, projectedNorthEastAsPoint.y],\n      [projectedNorthWestAsPoint.x, projectedNorthWestAsPoint.y],\n      [projectedSouthWestAsPoint.x, projectedSouthWestAsPoint.y],\n      [projectedSouthEastAsPoint.x, projectedSouthEastAsPoint.y]\n    ] as Rectangle\n    const projectedGeoSize = rectangleToSize(projectedGeoRectangle)\n    const projectedGeoPerViewportScale = sizesToScale(\n      projectedGeoSize,\n      viewportSize\n    )\n\n    const devicePixelRatio = window.devicePixelRatio\n\n    const viewport = new Viewport(\n      viewportSize,\n      projectedGeoCenter,\n      projectedGeoPerViewportScale,\n      { devicePixelRatio }\n    )\n\n    this.renderer.render(viewport)\n\n    return this.container\n  }\n\n  _contextLost(event: Event) {\n    event.preventDefault()\n    this.renderer?.contextLost()\n  }\n\n  _contextRestored(event: Event) {\n    event.preventDefault()\n    this.renderer?.contextRestored()\n  }\n\n  _addEventListeners() {\n    assertRenderer(this.renderer)\n    assertCanvas(this.canvas)\n\n    this.canvas.addEventListener(\n      'webglcontextlost',\n      this._contextLost.bind(this)\n    )\n    this.canvas.addEventListener(\n      'webglcontextrestored',\n      this._contextRestored.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.CHANGED,\n      this._update.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.IMAGEINFOLOADED,\n      this._update.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.WARPEDMAPENTER,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.WARPEDMAPLEAVE,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.addEventListener(\n      WarpedMapEventType.FIRSTMAPTILELOADED,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.addEventListener(\n      WarpedMapEventType.ALLREQUESTEDTILESLOADED,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.WARPEDMAPADDED,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.WARPEDMAPREMOVED,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.VISIBILITYCHANGED,\n      this._update.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.CLEARED,\n      this._update.bind(this)\n    )\n  }\n\n  _removeEventListeners() {\n    assertRenderer(this.renderer)\n    assertCanvas(this.canvas)\n\n    this.canvas.addEventListener(\n      'webglcontextlost',\n      this._contextLost.bind(this)\n    )\n    this.canvas.addEventListener(\n      'webglcontextrestored',\n      this._contextRestored.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.CHANGED,\n      this._update.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.IMAGEINFOLOADED,\n      this._update.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.WARPEDMAPENTER,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.WARPEDMAPLEAVE,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.removeEventListener(\n      WarpedMapEventType.FIRSTMAPTILELOADED,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.removeEventListener(\n      WarpedMapEventType.ALLREQUESTEDTILESLOADED,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.WARPEDMAPADDED,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.WARPEDMAPREMOVED,\n      this._passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.VISIBILITYCHANGED,\n      this._update.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.CLEARED,\n      this._update.bind(this)\n    )\n  }\n\n  _passWarpedMapEvent(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      if (this._map) {\n        this._map.fire(event.type, event.data)\n      }\n    }\n  }\n\n  _unload() {\n    assertRenderer(this.renderer)\n\n    if (!this.gl) {\n      return\n    }\n\n    this.renderer.destroy()\n\n    const extension = this.gl.getExtension('WEBGL_lose_context')\n    if (extension) {\n      extension.loseContext()\n    }\n    const canvas = this.gl.canvas\n    canvas.width = 1\n    canvas.height = 1\n\n    this.resizeObserver?.disconnect()\n\n    this._removeEventListeners()\n  }\n}\n"],"names":[],"mappings":"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"}